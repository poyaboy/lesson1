# 陣列(array) 可以把它想像成儲存許多值的清單，你可以：
arr = [1,2,3,4,5,6,7,8,9] # 把 1 到 9 存在 arr 這個陣列裡

# 也可以在裡面塞很多不同型別的資料：

arr2 = [0.3, "ntu rails", 4]

# 你也可以在 array 裡面塞另一個 array:

arr3 = [1, 2, [3,4]]
#-----------------------------------------

# 今天我要取得裡面儲存的值時，就需要他的索引值(index)

#arr[1] = 2

# 注意索引值是從 0 開始算起

arr  =   [1,2,3,4,5,6,7,8,9]
#索引值：  0 1 2 3 4 5 6 7 8 

#所以我要是希望在 arr 裡面取得 1：

arr[0] = 1

#就需要去index 為 0 的地方取得

#若是要刪掉 index 為 2 的值

arr.delete_at(2)

#然後 arr 裡面的 3 就被刪掉了
[1,2,4,5,6,7,8,9]

#-----------------------------------------

#今天我若要把 array 的最後一個值刪掉：

arr.pop 

#就會把 9 移除

#若要把 9 加回 array 最後面：

arr.push(9)

# 也可以這樣寫：

arr << 9 #非常簡潔易懂
#-----------------------------------------

#今天我若要改變 array 裡面所有的值，像是把所有值加上 2

arr.map {|x| x + 2} #使用 map 方法，x 代表每一個值

# 執行後，就會得到：

[3, 4, 5, 6, 7, 8, 9, 10, 11]

# 但這不會改變 arr 裡面原本的值，但若我們用 map!

arr.map! {|x| x + 2}

# 再查看一次 arr，此時 arr 就被改變了

arr = [3, 4, 5, 6, 7, 8, 9, 10, 11] 

# 任何加 ! 的方法代表呼叫該方法的物件最後會被改變

#------------------------------------------

# 最後，我想檢查一個 arr 裡是否存在 5：
# 可以用 include? method
arr = [1,2,3,4,5,6,7,8,9]

arr.include?(5)
# 5 存在，所以會回傳 true，相對的

arr.include?(18)
# 會回傳 false，true 和 false 是布林值，是電腦用來表示 '對'' 和 '錯' 的資料型別





